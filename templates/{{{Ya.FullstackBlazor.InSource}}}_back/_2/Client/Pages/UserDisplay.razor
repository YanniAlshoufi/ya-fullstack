@page "/users"
@using Shared.Data.Models
@using Shared.ServicesInterfaces
@inject IUsersService service

<main class="flex flex-col justify-center items-center h-[80dvh] gap-5">
    <h3 class="text-5xl dark:text-gray-100">User Display</h3>

    @if (_users.Count == 0)
    {
        <h1 class="text-2xl dark:text-gray-100">No users found.</h1>
    }
    else
    {
        <ul class="list-inside list-disc">

            @foreach (var user in _users)
            {
                <li class="user-el-@user.Id 
                           cursor-pointer text-2xl hover:line-through hover:text-red-600
                           dark:text-gray-100 w-full"
                    @onclick="@(() => DeleteUser(@user))">
                    @user.FirstName @user.LastName
                </li>
            }
        </ul>
    }

    <form @onsubmit="AddUser" @formname="AddUserForm"
          class="flex flex-col w-1/3 items-center gap-5">
        
        <div class="flex gap-5 w-full">
            <label class="flex-1 flex flex-col">
                First Name
                <InputText required maxlength="50" type="text" name="firstName"
                           @bind-Value="Model!.FirstName"
                           class="w-full min-w-min ring-1 ring-black rounded px-3 py-2 text-2xl box-border 
                                  dark:bg-gray-900 dark:text-gray-100 dark:ring-blue-400"/>
            </label>

            <label class="flex-1 flex flex-col">
                Last Name
                <InputText required maxlength="50" type="text" name="lastName"
                           @bind-Value="Model!.LastName"
                           class="w-full ring-1 ring-black rounded px-3 py-2 text-2xl box-border 
                                  dark:bg-gray-900 dark:text-gray-100 dark:ring-blue-400"/>
            </label>
        </div>

        <button type="submit"
                class="px-4 py-3 rounded active:scale-95 w-full
                   ring-1 ring-black dark:ring-blue-400 dark:text-blue-400 
                   hover:bg-black hover:text-gray-100 
                   dark:hover:bg-blue-400 dark:hover:text-gray-950">
            Add user
        </button>
    </form>
</main>

@code {

    [SupplyParameterFromForm]
    private User? Model { get; set; } = new()
    {
        FirstName = string.Empty,
        LastName = string.Empty,
    };

    private void ResetModel()
    {
        Model = new User
        {
            FirstName = string.Empty,
            LastName = string.Empty,
        };
    }

    private List<User> _users = [];

    private async void DeleteUser(User user)
    {
        var userDeletionResult = await service.DeleteUserAsync(user.Id);

        Console.WriteLine(userDeletionResult);

        userDeletionResult.Switch(
            exception => Console.WriteLine(exception.Message),
            () =>
            {
                _users.Remove(user);
                ResetModel();
                StateHasChanged();
            });
    }

    private async void AddUser()
    {
        if (Model is null)
        {
            Console.WriteLine("Model is null");
            return;
        }

        var response = await service.CreateUserAsync(Model);

        response.Switch(
            user =>
            {
                _users.Add(user);
                ResetModel();
                StateHasChanged();
            },
            exception => Console.WriteLine(exception.Message)
        );
    }

    protected override async void OnInitialized()
    {
        var res = await service.GetUsersAsync();

        res.Switch(
            users =>
            {
                _users = users;
                StateHasChanged();
            },
            error => Console.WriteLine(error.Message)
        );
    }

}